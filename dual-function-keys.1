.\" Automatically generated by Pandoc 2.11.2
.\"
.TH "DUAL-FUNCTION-KEYS" "1" "2020/12/25" "Dual Function Keys" "User Manuals"
.hy
.SH NAME
.PP
interception - dual function keys
.SH DESCRIPTION
.PP
Tap for one key, hold for another.
.PP
Great for modifier keys like: hold for ctrl, tap for delete.
.PP
A hand-saver for those with restricted finger mobility.
.PP
A plugin for interception tools (https://gitlab.com/interception/linux).
.SH FUNCTIONALITY
.PP
In these examples we will use the left shift key (LS).
.PP
It is configured to tap for delete (DE) and hold for LS.
.SS Tap
.PP
Press and release LS within TAP_MILLIS (default 200ms) for DE.
.PP
Until the tap is complete, we get LS.
.IP
.nf
\f[C]
                <---------200ms--------->     <---------200ms--------->
keyboard:       LS\[da]      LS\[ua]                  LS\[da]                          LS\[ua]
computer sees:  LS\[da]      LS\[ua] DE\[da] DE\[ua]          LS\[da]                          LS\[ua]
\f[R]
.fi
.SS Double Tap
.PP
Tap then press again with DOUBLE_TAP_MILLIS (default 150ms) to hold DE.
.IP
.nf
\f[C]
                             <-------150ms------->
                <---------200ms--------->
keyboard:       LS\[da]         LS\[ua]             LS\[da]               LS\[ua]
computer sees:  LS\[da]         LS\[ua] DE\[da] DE\[ua]     DE\[da] ..(repeats).. DE\[ua]
\f[R]
.fi
.PP
You can continue double tapping so long as it is within the DOUBLE_TAP_MILLIS window.
.SS Consumption
.PP
Press or release another key during the TAP_MILLIS window and the tap will not occur.
.PP
This is especially useful for modifiers, for instance a quick ctrl-C.
In this example we press the a key during the window.
.PP
Double taps do not apply after consumption; you will need to tap first.
.IP
.nf
\f[C]
                                                               <-------150ms------->
                                                 <---------200ms--------->
                                 <-------150ms------->
                <---------200ms--------->
keyboard:       LS\[da]   a\[da]  a\[ua]     LS\[ua]             LS\[da]          LS\[ua]           LS\[da]
computer sees:  LS\[da]              LS\[ua]             LS\[da]          LS\[ua] DE\[da] DE\[ua]   DE\[da] ..(repeats)..
\f[R]
.fi
.SH INSTALLATION
.SS Arch Linux
.PP
Arch Linux users may install from the Arch community package repository: interception-dual-function-keys (https://archlinux.org/packages/community/x86_64/interception-dual-function-keys/).
.SS From Source
.PP
See dependencies (https://gitlab.com/interception/linux/tools#dependencies).
.PP
Install Interception Tools (https://gitlab.com/interception/linux/tools) first.
.IP
.nf
\f[C]
git clone https://gitlab.com/interception/linux/plugins/dual-function-keys.git
cd dual-function-keys
make && sudo make install
\f[R]
.fi
.PP
Installation prefix defaults to \f[C]/usr/local\f[R].
This can be overridden in \f[C]config.mk\f[R].
.SH CONFIGURATION
.PP
There are two parts to be configured: dual-function-keys and udevmon, which launches dual-function-keys.
.PP
See examples (https://gitlab.com/interception/linux/plugins/dual-function-keys/-/tree/master/doc/examples.md) which contains dual-function-keys and udevmon.yaml configurations.
.SS dual-function-keys
.PP
This yaml file can go anywhere.
.PP
You can use raw (integer) keycodes, however it is easier to use the \f[C]#define\f[R]d strings from input-event-codes.h (https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h).
.IP
.nf
\f[C]
# optional
TIMING:
    TAP_MILLISEC: <integer>
    DOUBLE_TAP_MILLISEC: <integer>
    SYNTHETIC_KEYS_PAUSE_MILLISEC: <integer>

# necessary
MAPPINGS:
    - KEY: <integer | string>
      TAP: [ <integer | string>, ... ]
      HOLD: [ <integer | string>, ... ]
    - KEY: ...
\f[R]
.fi
.PP
Our example from the previous section looks like:
.IP
.nf
\f[C]
TIMING:
    TAP_MILLISEC: 200
    DOUBLE_TAP_MILLISEC: 150

MAPPINGS:
    - KEY: KEY_LEFTSHIFT
      TAP: KEY_DELETE
      HOLD: KEY_LEFTSHIFT
\f[R]
.fi
.PP
You can configure the \f[C]TAP\f[R] as a \[lq]combo\[rq], which will send multiple keys in order e.g.\ space cadet \f[C](\f[R]:
.IP
.nf
\f[C]
MAPPINGS:
    - KEY: KEY_LEFTSHIFT
      TAP: [ KEY_LEFTSHIFT, KEY_9, ]
      HOLD: KEY_LEFTSHIFT
\f[R]
.fi
.PP
You can configure the \f[C]HOLD\f[R] as a \[lq]combo\[rq], which will send multiple keys in order e.g.\ hyper modifier:
.IP
.nf
\f[C]
MAPPINGS:
    - KEY: KEY_TAB
      TAP: KEY_TAB
      HOLD: [ KEY_LEFTCTRL, KEY_LEFTMETA, KEY_LEFTALT, ] 
\f[R]
.fi
.PP
By default, there will be a pause of 20ms between keys in the \[lq]combo\[rq].
This may be changed:
.IP
.nf
\f[C]
TIMING:
    SYNTHETIC_KEYS_PAUSE_MILLISEC: 10
\f[R]
.fi
.PP
Warning: do not assign the same modifier to two keys that you intend to press at the same time, as they will interfere with each other.
Use left and right versions of the modifiers e.g.\ alt-tab with space-caps:
.IP
.nf
\f[C]
MAPPINGS:
    - KEY: KEY_CAPSLOCK
      TAP: KEY_TAB
      HOLD: KEY_LEFTALT

    - KEY: KEY_SPACE
      TAP: KEY_SPACE
      HOLD: KEY_RIGHTALT
\f[R]
.fi
.SS udevmon
.PP
udevmon needs to be informed that we desire Dual Function Keys.
See How It Works (https://gitlab.com/interception/linux/tools#how-it-works) for the full story.
.IP
.nf
\f[C]
- JOB: \[dq]intercept -g $DEVNODE | dual-function-keys -c </path/to/dual-function-keys.yaml> | uinput -d $DEVNODE\[dq]
  DEVICE:
    NAME: <keyboard name>
\f[R]
.fi
.PP
The name may be determined by executing:
.IP
.nf
\f[C]
sudo uinput -p -d /dev/input/by-id/X
\f[R]
.fi
.PP
where X is the device with the name that looks like your keyboard.
Ensure that all \f[C]EV_KEY\f[R]s are present under \f[C]EVENTS\f[R].
If you can\[cq]t find your keyboard under \f[C]/dev/input/by-id\f[R], look at devices directly under \f[C]/dev/input\f[R].
.PP
See Interception Tools: How It Works (https://gitlab.com/interception/linux/tools#how-it-works) for more information on \f[C]uinput -p\f[R].
.PP
Usually the name is sufficient to uniquely identify the keyboard, however some keyboards register many devices such as a virtal mouse.
You can run dual-function-keys for all the devices, however I prefer to run it only for the actual keyboard.
.PP
My \f[C]/etc/interception/udevmon.yml\f[R]:
.IP
.nf
\f[C]
- JOB: \[dq]intercept -g $DEVNODE | dual-function-keys -c /etc/interception/dual-function-keys/home-row-modifiers.yaml | uinput -d $DEVNODE\[dq]
  DEVICE:
    NAME: \[dq]q.m.k HHKB mod Keyboard\[dq]
- JOB: \[dq]intercept -g $DEVNODE | dual-function-keys -c /etc/interception/dual-function-keys/thumb-cluster.yaml | uinput -d $DEVNODE\[dq]
  DEVICE:
    NAME: \[dq]Kinesis Advantage2 Keyboard\[dq]
    EVENTS:
      EV_KEY: [ KEY_LEFTSHIFT ]
\f[R]
.fi
.SH CAVEATS
.PP
As always, there is a caveat: dual-function-keys operates on raw \f[I]keycodes\f[R], not \f[I]keysyms\f[R], as seen by X11 or Wayland.
.PP
If you have anything modifying the keycode->keysym mapping, such as XKB (https://www.x.org/wiki/XKB/) or xmodmap (https://wiki.archlinux.org/index.php/Xmodmap), be mindful that dual-function-keys operates before them.
.PP
Some common XKB usages that might be found in your X11 configuration:
.IP
.nf
\f[C]
    Option \[dq]XkbModel\[dq] \[dq]pc105\[dq]
    Option \[dq]XKbLayout\[dq] \[dq]us\[dq]
    Option \[dq]XkbVariant\[dq] \[dq]dvp\[dq]
    Option \[dq]XkbOptions\[dq] \[dq]caps:escape\[dq]
\f[R]
.fi
.SH FAQ
.SS I have a new use case. Can you support it?
.PP
Please raise an issue.
.PP
dual-function-keys has been built for my needs.
I will be intrigued to hear your ideas and help you make them happen.
.PP
As usual, PRs are very welcome.
.SS I see you are using q.m.k HHKB mod Keyboard in your udevmon. It uses QMK Firmware (https://qmk.fm/). Why not just use Tap-Hold (https://docs.qmk.fm/#/tap_hold)?
.PP
Good catch! That does indeed provide the same functionality as dual-function-keys.
Unfortunately there are some drawbacks:
.IP "1." 3
Few keyboards run QMK Firmware.
.IP "2." 3
There are some issues with that functionality, as noted in the documentation Tap-Hold (https://docs.qmk.fm/).
.IP "3." 3
It requires a fast processor in the keyboard.
My unscientific testing with an Ergodox (\[ti]800 scans/sec) and HHKB (\[ti]140) revealed that the slower keyboard is mushy and unuseably inaccurate.
.SS Why not use xcape (https://github.com/alols/xcape)?
.PP
Xcape only provides simple tap/hold functionality.
It appears difficult (impossible?) to add the remaining functionality using its XTestFakeKeyEvent mechanisms.
.SS My Key Combination Isn\[cq]t Working
.PP
Ensure that your window manager is not intercepting that key combination.
.SS I Don\[cq]t Want Double Tap Functionality
.PP
Set DOUBLE_TAP_MILLISEC to 0.
See Key Combinations, No Double Tap (https://gitlab.com/interception/linux/plugins/dual-function-keys/-/blob/master/doc/examples.md#key-combinations-no-double-tap).
.SH CONTRIBUTORS
.PP
Please fork this repo and submit a PR.
.PP
If you are making changes to the documentation, please edit the pandoc flavoured \f[C]dual-function-keys.md\f[R] and run \f[C]make doc\f[R].
Please ensure that this \f[C]README.md\f[R] and the man page \f[C]dual-function-keys.1\f[R] has your changes and commit all three.
.PP
As usual, please obey \f[C].editorconfig\f[R].
.SH LICENSE
.PP
.PP
Copyright \[co] 2020 Alexander Courtis
.SH AUTHORS
Alexander Courtis.
